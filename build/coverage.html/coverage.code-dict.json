{"/home/travis/build/npmtest/node-npmtest-uncss/test.js":"/* istanbul instrument in package npmtest_uncss */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-uncss/lib.npmtest_uncss.js":"/* istanbul instrument in package npmtest_uncss */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_uncss = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_uncss = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-uncss/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-uncss && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_uncss */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_uncss\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_uncss.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_uncss.rollup.js'] =\n            local.assetsDict['/assets.npmtest_uncss.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_uncss.__dirname + '/lib.npmtest_uncss.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-uncss/node_modules/uncss/src/uncss.js":"'use strict';\r\n\r\nvar promise = require('bluebird'),\r\n    async = require('async'),\r\n    assign = require('object-assign'),\r\n    fs = require('fs'),\r\n    glob = require('glob'),\r\n    isHTML = require('is-html'),\r\n    isURL = require('is-absolute-url'),\r\n    phantom = require('./phantom.js'),\r\n    postcss = require('postcss'),\r\n    uncss = require('./lib.js'),\r\n    utility = require('./utility.js'),\r\n    _ = require('lodash');\r\n\r\n/**\r\n * Get the contents of HTML pages through PhantomJS.\r\n * @param  {Array}   files   List of HTML files\r\n * @param  {Object}  options UnCSS options\r\n * @return {promise}\r\n */\r\nfunction getHTML(files, options) {\r\n    if (_.isString(files)) {\r\n        return phantom.fromRaw(files, options).then(function (pages) {\r\n            return [files, options, [pages]];\r\n        });\r\n    }\r\n\r\n    files = _.flatten(files.map(function (file) {\r\n        if (!isURL(file) && !isHTML(file)) {\r\n            return glob.sync(file);\r\n        }\r\n        return file;\r\n    }));\r\n\r\n    if (!files.length) {\r\n        throw new Error('UnCSS: no HTML files found');\r\n    }\r\n\r\n    return promise.map(files, function (filename) {\r\n        if (isURL(filename)) {\r\n            return phantom.fromRemote(filename, options);\r\n        }\r\n        if (fs.existsSync(filename)) {\r\n            return phantom.fromLocal(filename, options);\r\n        }\r\n        // raw html\r\n        return phantom.fromRaw(filename, options);\r\n    }).then(function (pages) {\r\n        return [files, options, pages];\r\n    });\r\n}\r\n\r\n/**\r\n * Get the contents of CSS files.\r\n * @param  {Array}   files   List of HTML files\r\n * @param  {Object}  options UnCSS options\r\n * @param  {Array}   pages   Pages opened by phridge\r\n * @return {promise}\r\n */\r\nfunction getStylesheets(files, options, pages) {\r\n    if (options.stylesheets && options.stylesheets.length) {\r\n        /* Simulate the behavior below */\r\n        return [files, options, pages, [options.stylesheets]];\r\n    }\r\n    /* Extract the stylesheets from the HTML */\r\n    return promise.map(pages, function (page) {\r\n        return phantom.getStylesheets(page, options);\r\n    }).then(function (stylesheets) {\r\n        return [files, options, pages, stylesheets];\r\n    });\r\n}\r\n\r\n/**\r\n * Get the contents of CSS files.\r\n * @param  {Array}   files       List of HTML files\r\n * @param  {Object}  options     UnCSS options\r\n * @param  {Array}   pages       Pages opened by phridge\r\n * @param  {Array}   stylesheets List of CSS files\r\n * @return {promise}\r\n */\r\nfunction getCSS(files, options, pages, stylesheets) {\r\n    /* Ignore specified stylesheets */\r\n    if (options.ignoreSheets.length) {\r\n        stylesheets = stylesheets.map(function (arr) {\r\n            return arr.filter(function (sheet) {\r\n                return _.every(options.ignoreSheets, function (ignore) {\r\n                    if (_.isRegExp(ignore)) {\r\n                        return !ignore.test(sheet);\r\n                    }\r\n                    return sheet !== ignore;\r\n                });\r\n            });\r\n        });\r\n    }\r\n\r\n    if (_.flatten(stylesheets).length) {\r\n        /* Only run this if we found links to stylesheets (there may be none...)\r\n         *  files       = ['some_file.html', 'some_other_file.html']\r\n         *  stylesheets = [['relative_css_path.css', ...],\r\n         *                 ['maybe_a_duplicate.css', ...]]\r\n         * We need to - make the stylesheets' paths relative to the HTML files,\r\n         *            - flatten the array,\r\n         *            - remove duplicates\r\n         */\r\n        stylesheets =\r\n            _.chain(stylesheets)\r\n            .map(function (sheets, i) {\r\n                return utility.parsePaths(files[i], sheets, options);\r\n            })\r\n            .flatten()\r\n            .uniq()\r\n            .value();\r\n    } else {\r\n        /* Reset the array if we didn't find any link tags */\r\n        stylesheets = [];\r\n    }\r\n    return [files, options, pages, utility.readStylesheets(stylesheets)];\r\n}\r\n\r\n/**\r\n * Do the actual work\r\n * @param  {Array}   files       List of HTML files\r\n * @param  {Object}  options     UnCSS options\r\n * @param  {Array}   pages       Pages opened by phridge\r\n * @param  {Array}   stylesheets List of CSS files\r\n * @return {promise}\r\n */\r\nfunction processWithTextApi(files, options, pages, stylesheets) {\r\n    /* If we specified a raw string of CSS, add it to the stylesheets array */\r\n    if (options.raw) {\r\n        if (_.isString(options.raw)) {\r\n            stylesheets.push(options.raw);\r\n        } else {\r\n            throw new Error('UnCSS: options.raw - expected a string');\r\n        }\r\n    }\r\n\r\n    /* At this point, there isn't any point in running the rest of the task if:\r\n     * - We didn't specify any stylesheet links in the options object\r\n     * - We couldn't find any stylesheet links in the HTML itself\r\n     * - We weren't passed a string of raw CSS in addition to, or to replace\r\n     *     either of the above\r\n     */\r\n    if (!_.flatten(stylesheets).length) {\r\n        throw new Error('UnCSS: no stylesheets found');\r\n    }\r\n\r\n    /* OK, so we have some CSS to work with!\r\n     * Three steps:\r\n     * - Parse the CSS\r\n     * - Remove the unused rules\r\n     * - Return the optimized CSS as a string\r\n     */\r\n    var cssStr = stylesheets.join(' \\n'),\r\n        pcss, report;\r\n    try {\r\n        pcss = postcss.parse(cssStr);\r\n    } catch (err) {\r\n        /* Try and construct a helpful error message */\r\n        throw utility.parseErrorMessage(err, cssStr);\r\n    }\r\n    return uncss(pages, pcss, options.ignore).spread(function (css, rep) {\r\n        var newCssStr = '';\r\n        postcss.stringify(css, function(result) {\r\n            newCssStr += result;\r\n        });\r\n\r\n        if (options.report) {\r\n            report = {\r\n                original: cssStr,\r\n                selectors: rep\r\n            };\r\n        }\r\n        return new promise(function (resolve) {\r\n            resolve([newCssStr, report]);\r\n        });\r\n    });\r\n}\r\n\r\n/**\r\n * Main exposed function.\r\n * Here we check the options and callback, then run the files through PhantomJS.\r\n * @param  {Array}    files     Array of filenames\r\n * @param  {Object}   [options] options\r\n * @param  {Function} callback(Error, String, Object)\r\n */\r\nfunction init(files, options, callback) {\r\n\r\n    if (_.isFunction(options)) {\r\n        /* There were no options, this argument is actually the callback */\r\n        callback = options;\r\n        options = {};\r\n    } else if (!_.isFunction(callback)) {\r\n        throw new TypeError('UnCSS: expected a callback');\r\n    }\r\n\r\n    /* Try and read options from the specified uncssrc file */\r\n    if (options.uncssrc) {\r\n        try {\r\n            /* Manually-specified options take precedence over uncssrc options */\r\n            options = _.merge(utility.parseUncssrc(options.uncssrc), options);\r\n        } catch (err) {\r\n            if (err instanceof SyntaxError) {\r\n                callback(new SyntaxError('UnCSS: uncssrc file is invalid JSON.'));\r\n                return;\r\n            }\r\n            callback(err);\r\n            return;\r\n        }\r\n    }\r\n\r\n    /* Assign default values to options, unless specified */\r\n    options = _.defaults(options, {\r\n        csspath: '',\r\n        ignore: [],\r\n        media: [],\r\n        timeout: 0,\r\n        report: false,\r\n        ignoreSheets: [],\r\n        html: files,\r\n        // gulp-uncss parameters:\r\n        raw: null\r\n    });\r\n\r\n    serializedQueue.push(options, callback);\r\n}\r\n\r\nfunction processAsPostCss(files, options, pages) {\r\n    return uncss(pages, options.rawPostCss, options.ignore);\r\n}\r\n\r\n// There always seem to be problems trying to run more than one phantom at a time,\r\n// so let's serialize all their accesses here\r\nvar serializedQueue = async.queue(function (opts, callback) {\r\n    if (opts.usePostCssInternal) {\r\n        return promise\r\n            .using(phantom.init(phantom.phantom), function () {\r\n                return getHTML(opts.html, opts)\r\n                    .spread(processAsPostCss);\r\n            })\r\n            .asCallback(callback);\r\n    }\r\n    return promise\r\n        .using(phantom.init(phantom.phantom), function () {\r\n            return getHTML(opts.html, opts)\r\n                .spread(getStylesheets)\r\n                .spread(getCSS)\r\n                .spread(processWithTextApi);\r\n        })\r\n        .asCallback(callback, { spread: true });\r\n}, 1);\r\n\r\nserializedQueue.drain = function() {\r\n    phantom.cleanupAll();\r\n};\r\n\r\nvar postcssPlugin = postcss.plugin('uncss', function (opts) {\r\n    opts = _.defaults(opts, {\r\n        usePostCssInternal: true,\r\n        // Ignore stylesheets in the HTML files; only use those from the stream\r\n        ignoreSheets: [/\\s*/],\r\n        html: [],\r\n        ignore: []\r\n    });\r\n\r\n    return function (css, result) { // eslint-disable-line no-unused-vars\r\n        opts = assign(opts, {\r\n            // This is used to pass the css object in to processAsPostCSS\r\n            rawPostCss: css\r\n        });\r\n\r\n        return new promise(function (resolve, reject) {\r\n            serializedQueue.push(opts, function (err) {\r\n                if (err) {\r\n                    reject(err);\r\n                } else {\r\n                    resolve();\r\n                }\r\n            });\r\n        });\r\n    };\r\n});\r\n\r\nmodule.exports = init;\r\nmodule.exports.postcssPlugin = postcssPlugin;\r\n","/home/travis/build/npmtest/node-npmtest-uncss/node_modules/uncss/src/phantom.js":"'use strict';\n\n/* eslint-env phantomjs */\n\n/* globals document: true */\n\nvar path = require('path'),\n    phridge = require('phridge'),\n    promise = require('bluebird'),\n    utility = require('./utility'),\n    fs = require('fs'),\n    _ = require('lodash');\n\nvar phantom;\n\n/**\n * Create the PhantomJS instances, or use the given one.\n * @param  {Object}  instance   The instance to use, if there is one\n * @return {promise}\n */\nfunction init(instance) {\n    if (instance) {\n        phantom = instance;\n        return null;\n    }\n\n    // Convert to bluebird promise\n    return new promise(function (resolve) {\n        resolve(phridge.spawn({\n            ignoreSslErrors: 'yes',\n            sslProtocol: 'any'\n        }));\n    }).then(function (ph) {\n        /* Phridge outputs everything to stdout by default */\n        ph.childProcess.cleanStdout.unpipe();\n        ph.childProcess.cleanStdout.pipe(process.stderr);\n        phantom = ph;\n    }).disposer(phridge.disposeAll);\n}\n\nfunction cleanupAll() {\n    phridge.disposeAll();\n}\n\n/**\n * This function is called whenever a resource is requested by PhantomJS.\n * If we are loading either raw HTML or a local page, PhantomJS needs to be able to find the\n *   resource with an absolute path.\n * There are two possible cases:\n *   - 'file://': This might be either a protocol-less URL or a relative path. Since we\n *                can't handle both, we choose to handle the former.\n *   - 'file:///': This is an absolute path. If options.htmlroot is specified, we have a chance to\n *                 redirect the request to the correct location.\n */\nfunction ResourceHandler(htmlroot, isWindows, resolve) {\n    var ignoredExtensions = ['\\\\.css', '\\\\.png', '\\\\.gif', '\\\\.jpg', '\\\\.jpeg', ''],\n        ignoredEndpoints = ['fonts\\\\.googleapis'];\n\n    var ignoreRequests = new RegExp(ignoredExtensions.join('$|') + ignoredEndpoints.join('|'));\n\n    this.onResourceRequested = function (requestData, networkRequest) {\n        var originalUrl = requestData.url,\n            url = originalUrl.split('?')[0].split('#')[0];\n\n        if (url.substr(-3) === '.js' && url.substr(0, 7) === 'file://') {\n            /* Try and match protocol-less URLs and absolute ones.\n             * Relative URLs will still not load.\n             */\n            if (url.substr(5, 3) === '///') {\n                /* Absolute URL\n                 * Retry loading the resource appending the htmlroot option\n                 */\n                if (isWindows) {\n                    /* Do not strip leading '/' */\n                    url = originalUrl.substr(0, 8) + htmlroot + originalUrl.substr(7);\n                } else {\n                    url = originalUrl.substr(0, 7) + htmlroot + originalUrl.substr(7);\n                }\n            } else {\n                /* Protocol-less URL */\n                url = 'http://' + originalUrl.substr(7);\n            }\n            networkRequest.changeUrl(url);\n        } else if (ignoreRequests.test(url)) {\n            networkRequest.abort();\n        }\n    };\n    resolve();\n}\n\n/**\n * Helper for fromRaw, fromLocal, fromRemote;\n * return the phantom page after the timeout\n * has elapsed\n * @param  {phantom} page    Page created by phantom\n * @param  {Object} options\n * @return {promise}\n */\nfunction resolveWithPage(page, options) {\n    return function () {\n        return new promise(function (resolve) {\n            setTimeout(function () {\n                return resolve(page);\n            }, options.timeout);\n        });\n    };\n}\n\n/**\n * Load a page given an HTML string.\n * @param  {String}  html\n * @param  {Object}  options\n * @return {promise}\n */\nfunction fromRaw(html, options) {\n    var page = phantom.createPage(),\n        htmlroot = path.join(process.cwd(), options.htmlroot || '');\n\n    return promise.resolve(page.run(htmlroot, utility.isWindows(), ResourceHandler).then(function () {\n        return page.run(html, function (raw) {\n            this.setContent(raw, 'local');\n        });\n    }).then(resolveWithPage(page, options)));\n}\n\n/**\n * Open a page given a filename.\n * @param  {String}  filename\n * @param  {Object}  options\n * @return {promise}\n */\nfunction fromLocal(filename, options) {\n    return promise.promisify(fs.readFile)(filename, 'utf-8').then(function (html) {\n        return fromRaw(html, options);\n    });\n}\n\n/**\n * Open a page given a URL.\n * @param  {String}  url\n * @param  {Object}  options\n * @return {promise}\n */\nfunction fromRemote(url, options) {\n    /* If the protocol is unspecified, default to HTTP */\n    if (!/^http/.test(url)) {\n        url = 'http:' + url;\n    }\n\n    return promise.resolve(phantom.openPage(url).then(function (page) {\n        return resolveWithPage(page, options)();\n    }));\n}\n\n/**\n * Extract stylesheets' hrefs from dom\n * @param  {Object}  page       A PhantomJS page\n * @param  {Object}  options    Options, as passed to UnCSS\n * @return {promise}\n */\nfunction getStylesheets(page, options) {\n    if (_.isArray(options.media) === false) {\n        options.media = [options.media];\n    }\n    var media = _.union(['', 'all', 'screen'], options.media);\n    return page.run(function () {\n        return this.evaluate(function () {\n            return Array.prototype.map.call(document.querySelectorAll('link[rel=\"stylesheet\"]'), function (link) {\n                return {\n                    href: link.href,\n                    media: link.media\n                };\n            });\n        });\n    }).then(function (stylesheets) {\n        stylesheets = _\n            .toArray(stylesheets)\n            /* Match only specified media attributes, plus defaults */\n            .filter(function (sheet) {\n                return media.indexOf(sheet.media) !== -1;\n            })\n            .map(function (sheet) {\n                return sheet.href;\n            });\n        return stylesheets;\n    });\n}\n\n/**\n * Filter unused selectors.\n * @param  {Object}  page   A PhantomJS page\n * @param  {Array}   sels   List of selectors to be filtered\n * @return {promise}\n */\nfunction findAll(page, sels) {\n    return page.run(sels, function (args) {\n        return this.evaluate(function (selectors) {\n            // Unwrap noscript elements\n            Array.prototype.forEach.call(document.getElementsByTagName('noscript'), function (ns) {\n                var wrapper = document.createElement('div');\n                wrapper.innerHTML = ns.innerText;\n                // Insert each child of the <noscript> as its sibling\n                Array.prototype.forEach.call(wrapper.children, function (child) {\n                    ns.parentNode.insertBefore(child, ns);\n                });\n            });\n            // Do the filtering\n            selectors = selectors.filter(function (selector) {\n                try {\n                    if (document.querySelector(selector)) {\n                        return true;\n                    }\n                } catch (e) {\n                    return true;\n                }\n                return false;\n            });\n            return {\n                selectors: selectors\n            };\n        }, args);\n    }).then(function (res) {\n        if (res === null) {\n            return [];\n        }\n        return res.selectors;\n    });\n}\n\nmodule.exports = {\n    init: init,\n    cleanupAll: cleanupAll,\n    fromLocal: fromLocal,\n    fromRaw: fromRaw,\n    fromRemote: fromRemote,\n    findAll: findAll,\n    getStylesheets: getStylesheets\n};\n","/home/travis/build/npmtest/node-npmtest-uncss/node_modules/uncss/src/utility.js":"'use strict';\n\nvar promise = require('bluebird'),\n    isHTML = require('is-html'),\n    isURL = require('is-absolute-url'),\n    os = require('os'),\n    path = require('path'),\n    url = require('url');\n\nvar fs = promise.promisifyAll(require('fs'), { multiArgs: true }),\n    request = promise.promisify(require('request'), { multiArgs: true });\n\nfunction isWindows() {\n    return os.platform() === 'win32';\n}\n\n/**\n * Check if the supplied string might be a RegExp and, if so, return the corresponding RegExp.\n * @param  {String} str     The regex to transform.\n * @return {RegExp|String}  The final RegExp\n */\nfunction strToRegExp(str) {\n    if (str[0] === '/') {\n        return new RegExp(str.replace(/^\\/|\\/$/g, ''));\n    }\n    return str;\n}\n\n/**\n * Parse a given uncssrc file.\n * @param  {String} filename The location of the uncssrc file\n * @return {Object}          The options object\n */\nfunction parseUncssrc(filename) {\n    var options = JSON.parse(fs.readFileSync(filename, 'utf-8'));\n\n    /* RegExps can't be stored as JSON, therefore we need to parse them manually.\n     * A string is a RegExp if it starts with '/', since that wouldn't be a valid CSS selector.\n     */\n    options.ignore = options.ignore ? options.ignore.map(strToRegExp) : undefined;\n    options.ignoreSheets = options.ignoreSheets ? options.ignoreSheets.map(strToRegExp) : undefined;\n\n    return options;\n}\n\n/**\n * Parse paths relatives to a source.\n * @param  {String} source      Where the paths originate from\n * @param  {Array}  stylesheets List of paths\n * @param  {Object} options     Options, as passed to UnCSS\n * @return {Array}              List of paths\n */\nfunction parsePaths(source, stylesheets, options) {\n    return stylesheets.map(function (sheet) {\n        var sourceProtocol;\n\n        if (sheet.substr(0, 4) === 'http') {\n            /* No need to parse, it's already a valid path */\n            return sheet;\n        }\n\n        /* Check if we are fetching over http(s) */\n        if (isURL(source)) {\n            sourceProtocol = url.parse(source).protocol;\n\n            if (sheet.substr(0, 2) === '//') {\n                /* Use the same protocol we used for fetching this page.\n                 * Default to http.\n                 */\n                return sourceProtocol ? sourceProtocol + sheet : 'http:' + sheet;\n            }\n            return url.resolve(source, sheet);\n        }\n\n        /* We are fetching local files\n         * Should probably report an error if we find an absolute path and\n         *   have no htmlroot specified.\n         */\n        /* Fix the case when there is a query string or hash */\n        sheet = sheet.split('?')[0].split('#')[0];\n\n        /* Path already parsed by PhantomJS */\n        if (sheet.substr(0, 5) === 'file:') {\n            sheet = url.parse(sheet).path.replace('%20', ' ');\n            /* If on windows, remove first '/' */\n            sheet = isWindows() ? sheet.substring(1) : sheet;\n\n            if (options.htmlroot) {\n                return path.join(options.htmlroot, sheet);\n            }\n            sheet = path.relative(path.join(path.dirname(source)), sheet);\n        }\n\n        if (sheet[0] === '/' && options.htmlroot) {\n            return path.join(options.htmlroot, sheet);\n        } else if (isHTML(source)) {\n            return path.join(options.csspath, sheet);\n        }\n        return path.join(path.dirname(source), options.csspath, sheet);\n    });\n}\n\n/**\n * Given an array of filenames, return an array of the files' contents,\n *   only if the filename matches a regex\n * @param  {Array}   files  An array of the filenames to read\n * @return {promise}\n */\nfunction readStylesheets(files) {\n    return promise.map(files, function (filename) {\n        if (isURL(filename)) {\n            return request({\n                url: filename,\n                headers: { 'User-Agent': 'UnCSS' }\n            }).spread(function (response, body) {\n                return body;\n            });\n        } else if (fs.existsSync(filename)) {\n            return fs.readFileAsync(filename, 'utf-8').then(function (contents) {\n                return contents;\n            });\n        }\n        throw new Error('UnCSS: could not open ' + path.join(process.cwd(), filename));\n    }).then(function (res) {\n        // res is an array of the content of each file in files (in the same order)\n        for (var i = 0, len = files.length; i < len; i++) {\n            // We append a small banner to keep track of which file we are currently processing\n            // super helpful for debugging\n            var banner = '/*** uncss> filename: ' + files[i].replace(/\\\\/g, '/') + ' ***/\\n';\n            res[i] = banner + res[i];\n        }\n        return res;\n    });\n}\n\nfunction parseErrorMessage(error, cssStr) {\n    /* TODO: FIXME */\n    /* Base line for conveying the line number in the error message */\n    var zeroLine = 0;\n\n    if (error.line) {\n        var lines = cssStr.split('\\n');\n        if (lines.length) {\n            /* We get the filename of the css file that contains the error */\n            var i = error.line - 1;\n            while (i >= 0 && !error.filename) {\n                if (lines[i].substr(0, 21) === '/*** uncss> filename:') {\n                    error.filename = lines[i].substring(22, lines[i].length - 4);\n                    zeroLine = i;\n                }\n                i--;\n            }\n            for (var j = error.line - 6; j < error.line + 5; j++) {\n                if (j - zeroLine < 0 || j >= lines.length) {\n                    continue;\n                }\n                var line = lines[j];\n                /* It could be minified CSS */\n                if (line.length > 120 && error.column) {\n                    line = line.substring(error.column - 40, error.column);\n                }\n                error.message += '\\n\\t' + (j + 1 - zeroLine) + ':    ';\n                error.message += j === error.line - 1 ? ' -> ' : '    ';\n                error.message += line;\n            }\n        }\n    }\n    if (zeroLine > 0) {\n        error.message = error.message.replace(/[0-9]+:/, error.line - zeroLine + ':');\n    }\n    error.message = 'uncss/node_modules/css: unable to parse ' + error.filename + ':\\n' + error.message + '\\n';\n    return error;\n}\n\nmodule.exports = {\n    isWindows: isWindows,\n    parseUncssrc: parseUncssrc,\n    parseErrorMessage: parseErrorMessage,\n    parsePaths: parsePaths,\n    readStylesheets: readStylesheets\n};\n","/home/travis/build/npmtest/node-npmtest-uncss/node_modules/uncss/src/lib.js":"'use strict';\n\nvar promise = require('bluebird'),\n    phantom = require('./phantom.js'),\n    postcss = require('postcss'),\n    _ = require('lodash');\n/* Some styles are applied only with user interaction, and therefore its\n *   selectors cannot be used with querySelectorAll.\n * http://www.w3.org/TR/2001/CR-css3-selectors-20011113/\n */\nvar dePseudify = (function () {\n    var ignoredPseudos = [\n            /* link */\n            ':link', ':visited',\n            /* user action */\n            ':hover', ':active', ':focus',\n            /* UI element states */\n            ':enabled', ':disabled', ':checked', ':indeterminate',\n            /* pseudo elements */\n            '::first-line', '::first-letter', '::selection', '::before', '::after',\n            /* pseudo classes */\n            ':target',\n            /* CSS2 pseudo elements */\n            ':before', ':after',\n            /* Vendor-specific pseudo-elements:\n             * https://developer.mozilla.org/ja/docs/Glossary/Vendor_Prefix\n             */\n            '::?-(?:moz|ms|webkit|o)-[a-z0-9-]+'\n        ],\n        pseudosRegex = new RegExp(ignoredPseudos.join('|'), 'g');\n\n    return function (selector) {\n        return selector.replace(pseudosRegex, '');\n    };\n}());\n\n/**\n * Private function used in filterUnusedRules.\n * @param  {Array} selectors      CSS selectors created by the CSS parser\n * @param  {Array} ignore         List of selectors to be ignored\n * @param  {Array} usedSelectors  List of Selectors found in the PhantomJS pages\n * @return {Array}                The selectors matched in the DOMs\n */\nfunction filterUnusedSelectors(selectors, ignore, usedSelectors) {\n    /* There are some selectors not supported for matching, like\n     *   :before, :after\n     * They should be removed only if the parent is not found.\n     * Example: '.clearfix:before' should be removed only if there\n     *          is no '.clearfix'\n     */\n    return selectors.filter(function (selector) {\n        selector = dePseudify(selector);\n        /* TODO: process @-rules */\n        if (selector[0] === '@') {\n            return true;\n        }\n        for (var i = 0, len = ignore.length; i < len; ++i) {\n            if (_.isRegExp(ignore[i]) && ignore[i].test(selector)) {\n                return true;\n            }\n            if (ignore[i] === selector) {\n                return true;\n            }\n        }\n        return usedSelectors.indexOf(selector) !== -1;\n    });\n}\n\n/**\n * Find which animations are used\n * @param  {Object} css             The postcss.Root node\n * @return {Array}\n */\nfunction getUsedAnimations(css) {\n    var usedAnimations = [];\n    css.walkDecls(function (decl) {\n        if (_.endsWith(decl.prop, 'animation-name')) {\n            /* Multiple animations, separated by comma */\n            usedAnimations.push.apply(usedAnimations, postcss.list.comma(decl.value));\n        } else if (_.endsWith(decl.prop, 'animation')) {\n            /* Support multiple animations */\n            postcss.list.comma(decl.value).forEach(function (anim) {\n                /* If declared as animation, it should be in the form 'name Xs etc..' */\n                usedAnimations.push(postcss.list.space(anim)[0]);\n            });\n        }\n    });\n    return usedAnimations;\n}\n\n/**\n * Filter @keyframes that are not used\n * @param  {Object} css             The postcss.Root node\n * @param  {Array}  animations\n * @param  {Array}  unusedRules\n * @return {Array}\n */\nfunction filterKeyframes(css, animations, unusedRules) {\n    css.walkAtRules(/keyframes$/, function (atRule) {\n        if (animations.indexOf(atRule.params) === -1) {\n            unusedRules.push(atRule);\n            atRule.remove();\n        }\n    });\n}\n\n/**\n * Filter rules with no selectors remaining\n * @param  {Object} css             The postcss.Root node\n * @return {Array}\n */\nfunction filterEmptyAtRules(css) {\n    /* Filter media queries with no remaining rules */\n    css.walkAtRules(function (atRule) {\n        if (atRule.name === 'media' && atRule.nodes.length === 0) {\n            atRule.remove();\n        }\n    });\n}\n\n/**\n * Find which selectors are used in {pages}\n * @param  {Array}    pages         List of PhantomJS pages\n * @param  {Object}   css           The postcss.Root node\n * @return {promise}\n */\nfunction getUsedSelectors(page, css) {\n    var usedSelectors = [];\n    css.walkRules(function (rule) {\n        usedSelectors = _.concat(usedSelectors, rule.selectors.map(dePseudify));\n    });\n    // TODO: Can this be written in a more straightforward fashion?\n    return promise.map(usedSelectors, function (selector) {\n        return selector;\n    }).then(function(selector) {\n        return phantom.findAll(page, selector);\n    });\n}\n\n/**\n * Get all the selectors mentioned in {css}\n * @param  {Object} css        The postcss.Root node\n * @return {Array}\n */\nfunction getAllSelectors(css) {\n    var selectors = [];\n    css.walkRules(function (rule) {\n        selectors.concat(rule.selector);\n    });\n    return selectors;\n}\n\n/**\n * Remove css rules not used in the dom\n * @param  {Array}  pages           List of PhantomJS pages\n * @param  {Object} css             The postcss.Root node\n * @param  {Array}  ignore          List of selectors to be ignored\n * @param  {Array}  usedSelectors   List of selectors that are found in {pages}\n * @return {Object}                 A css_parse-compatible stylesheet\n */\nfunction filterUnusedRules(pages, css, ignore, usedSelectors) {\n    var ignoreNextRule = false,\n        unusedRules = [],\n        unusedRuleSelectors,\n        usedRuleSelectors;\n    /* Rule format:\n     *  { selectors: [ '...', '...' ],\n     *    declarations: [ { property: '...', value: '...' } ]\n     *  },.\n     * Two steps: filter the unused selectors for each rule,\n     *            filter the rules with no selectors\n     */\n    ignoreNextRule = false;\n    css.walk(function (rule) {\n        if (rule.type === 'comment') {\n            // ignore next rule while using comment `/* uncss:ignore */`\n            if (/^!?\\s?uncss:ignore\\s?$/.test(rule.text)) {\n                ignoreNextRule = true;\n            }\n        } else if (rule.type === 'rule') {\n            if (rule.parent.type === 'atrule' && _.endsWith(rule.parent.name, 'keyframes')) {\n                // Don't remove animation keyframes that have selector names of '30%' or 'to'\n                return;\n            }\n            if (ignoreNextRule) {\n                ignoreNextRule = false;\n                ignore = ignore.concat(rule.selectors);\n            }\n\n            usedRuleSelectors = filterUnusedSelectors(\n                rule.selectors,\n                ignore,\n                usedSelectors\n            );\n            unusedRuleSelectors = rule.selectors.filter(function (selector) {\n                return usedRuleSelectors.indexOf(selector) < 0;\n            });\n            if (unusedRuleSelectors && unusedRuleSelectors.length) {\n                unusedRules.push({\n                    type: 'rule',\n                    selectors: unusedRuleSelectors,\n                    position: rule.source\n                });\n            }\n            if (usedRuleSelectors.length === 0) {\n                rule.remove();\n            } else {\n                rule.selectors = usedRuleSelectors;\n            }\n        }\n    });\n\n    /* Filter the @media rules with no rules */\n    filterEmptyAtRules(css);\n\n    /* Filter unused @keyframes */\n    filterKeyframes(css, getUsedAnimations(css), unusedRules);\n\n    return css;\n}\n\n/**\n * Main exposed function\n * @param  {Array}   pages      List of PhantomJS pages\n * @param  {Object}  css        The postcss.Root node\n * @param  {Array}   ignore     List of selectors to be ignored\n * @return {promise}\n */\nmodule.exports = function uncss(pages, css, ignore) {\n    return promise.map(pages, function (page) {\n        return getUsedSelectors(page, css);\n    }).then(function (usedSelectors) {\n        usedSelectors = _.flatten(usedSelectors);\n        var filteredCss = filterUnusedRules(pages, css, ignore, usedSelectors);\n        return [filteredCss, {\n            /* Get the selectors for the report */\n            all: getAllSelectors(css),\n            used: usedSelectors\n        }];\n    });\n};\n"}